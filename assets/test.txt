async function decode(message_file) {
  return new Promise((resolve, reject) => {
    // read the file
    fs.readFile(message_file, "utf8", (err, str) => {
      if (err) {
        reject(err);
        return;
      }
      // dict will contain parsed, number + word pairs, like '296':land
      const dict = {};
      const lines = str.split("\n");
      lines.map((line) => {
        const [number, word] = line.split(" ");
        dict[parseInt(number)] = word.replace(/\r/g, "");
      });
      // determine the indices of the last element of each line of pyramid
      let pyramidIndex = [];
      let temp = 1;
      let lineLength = 1;
      while (temp <= lines.length) {
        pyramidIndex.push(temp);
        lineLength++;
        temp += lineLength;
      }

      // use pyramidIndex to find the corresponding words
      let decodedMessage = "";
      for (i of pyramidIndex) {
        decodedMessage += dict[i] + " ";
      }
      resolve(decodedMessage.trim());
      console.log(decodedMessage);
    });
  });
}

Explanation: the async function returns a promise after it reads and parses the .txt file. After reading the file as a string, we parse through the file line by line into an array consisting of the number and the word. We then map this to an object where the key is the number and the value is the word. Then, to find the decoded message efficiently and avoid building out the entire pyramid using a nested array, we simply find all the indices of the last element of each row by keeping track of the line number and line length in a while loop. Finally, we add all the corresponding strings to the indices in pyramidIndex for the decoded message.